@page "/"
@using CodeEditor.Appl.Interfaces
@using System.Text

@inject IFolderPicker folderPicker;
@inject IFileOperator fileOperator;


<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton OnClick="UpdateContent" Icon="@Icons.Material.Outlined.FileOpen" />
        <MudIconButton OnClick="UpdateContent" Icon="@Icons.Material.Outlined.Save"/>
        <MudIconButton OnClick="SaveFileAsync" Icon="@Icons.Material.Outlined.PlayCircleFilled" Color="Color.Success"/>
        <MudSpacer />
        <MudIconButton OnClick="UpdateContent" Icon="@Icons.Material.Outlined.Info"/>
        <MudIconButton OnClick="EditLabel" Icon="@Icons.Material.Outlined.Edit" />


    </MudToolBar>
</MudPaper>
<MudDynamicTabs @ref="@DynamicTabs" @bind-ActivePanelIndex="@UserIndex"
                AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab. All data will be lost"
                PanelClass="" Elevation="4" Rounded ApplyEffectsToContainer>
    @foreach (var tab in UserTabs)
    {
        <MudTabPanel ID="@tab.Id" Text="@tab.Label" ShowCloseIcon="@tab.ShowCloseIcon">
            <div class="editLabelGroup">
                <InputText @bind-Value="@TextValue" style="@editStyle" class="changeLabelInput"></InputText>
                <MudIconButton Style="@editStyle" OnClick="ChangeLabel" Icon="@Icons.Material.Outlined.Done" />
            </div>
            
        </MudTabPanel>
    }
</MudDynamicTabs>
<StandaloneCodeEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions"/>

@code {

    public class TabView
    {
        public string Label { get; set; }
        public string Content { get; set; }
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = true;
    }


    private StandaloneCodeEditor _editor = null!;

    public MudDynamicTabs DynamicTabs;
    public List<TabView> UserTabs = new();
    private int userIndex;
    public int UserIndex
    {
        get
        {
            return userIndex;
        }
        set
        {
            userIndex = value;
            if(userIndex >= 0)
            {
                _editor.SetValue(UserTabs[userIndex].Content);
            }
        }
    }

    bool _stateHasChanged;
    bool _showCloseIcon = false;
    bool firstLaunch = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserTabs.Add(new TabView
            {
                Id = Guid.NewGuid(),
                Label = "Tab A",
                Content = "\"use strict\";\n" +
                                "function Person(age) {\n" +
                                "	if (age) {\n" +
                                "		this.age = age;\n" +
                                "	}\n" +
                                "}\n" +
                                "Person.prototype.getAge = function () {\n" +
                                "	return this.age;\n" +
                                "};\n"
            });
        userIndex = 0;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_stateHasChanged)
        {
            _stateHasChanged = false;
            StateHasChanged();
        }
    }

    public void AddTab(Guid id)
    {
        UserTabs.Add(new TabView { Id = id, Label = "dynamic tab", Content = "" });
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
    }

    public void RemoveTab(Guid id)
    {
        var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            UserTabs.Remove(tabView);
            _stateHasChanged = true;
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);


    private string _valueToSet = "";

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                GlyphMargin = true,
                Value = UserTabs[UserIndex].Content
            };
    }

    private async Task SetValue(int index)
    {
        await _editor.SetValue(UserTabs[index].Content);
    }

    private async Task UpdateContent()
    {
        UserTabs[UserIndex].Content = await _editor.GetValue();
    }

    public async void SaveFileAsync()
    {
        var path = await folderPicker.PickFolder();
        var fullPath = $"{path}\\{UserTabs[UserIndex].Label}.txt";
        await UpdateContent();
        fileOperator.SaveScriptFile(UserTabs[UserIndex].Content, fullPath);
    }

    private string editStyle = "display: none";
    private bool showEditField = false;
    private string TextValue = "";

    private void EditLabel()
    {
        showEditField = !showEditField;
        if(showEditField == true)
        {
            editStyle = "";
        }
        else
        {
            editStyle = "display: none;";
        }
    }

    private void ChangeLabel()
    {
        UserTabs[UserIndex].Label = TextValue;
        TextValue = "";
    }
}