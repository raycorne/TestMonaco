@page "/"
@using CodeEditor.Appl.Interfaces
@using System.Text
@using CodeEditor.Infrastructure.Services
@using CommunityToolkit.Maui.Storage

@inject IFileOperator fileOperator;

@inject IFileSaver fileSaver;

@inject IConvertService converter;


<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton OnClick="LoadFileAsync" Icon="@Icons.Material.Outlined.FileOpen" />
        <MudIconButton OnClick="SaveFileAsync" Icon="@Icons.Material.Outlined.Save"/>
        <MudIconButton OnClick="TranslateCode" Icon="@Icons.Material.Outlined.PlayCircleFilled" Color="Color.Success"/>
        <MudSpacer />
        <MudIconButton OnClick="ShowAboutInfo" Icon="@Icons.Material.Outlined.Info"/>
        <MudIconButton OnClick="EditLabel" Icon="@Icons.Material.Outlined.Edit" />


    </MudToolBar>
</MudPaper>
<MudDynamicTabs @ref="@DynamicTabs" @bind-ActivePanelIndex="@UserIndex"
                AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab. All data will be lost"
                PanelClass="" Elevation="4" Rounded ApplyEffectsToContainer>
    @foreach (var tab in UserTabs)
    {
        string tabLabel = tab.Label;
        @if(tab.IsSaved == false)
        {
            tabLabel += "*";
        }
        <MudTabPanel ID="@tab.Id" Text="@tabLabel" ShowCloseIcon="@tab.ShowCloseIcon">
            <div class="editLabelGroup">
                <InputText @bind-Value="@TextValue" style="@editStyle" class="changeLabelInput"></InputText>
                <MudIconButton Style="@editStyle" OnClick="ChangeLabel" Icon="@Icons.Material.Outlined.Done" />
            </div>
            
        </MudTabPanel>
    }
</MudDynamicTabs>
@if(UserTabs.Count > 0)
{
    <StandaloneCodeEditor OnKeyUp="EditorOnKeyUp" @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" />
}


@code {

    public class TabView
    {
        public string Label { get; set; }
        public string Content { get; set; }
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = true;
        public bool IsSaved { get; set; } = false;
    }


    private StandaloneCodeEditor _editor = null!;

    public MudDynamicTabs DynamicTabs;
    public List<TabView> UserTabs = new();
    private int userIndex;
    public int UserIndex
    {
        get
        {
            return userIndex;
        }
        set
        {
            userIndex = value;
            if(userIndex >= 0)
            {
                _editor.SetValue(UserTabs[userIndex].Content);
            }
        }
    }

    bool _stateHasChanged;
    bool _showCloseIcon = false;
    bool firstLaunch = true;

    string assemblyCode = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserTabs.Add(new TabView
            {
                Id = Guid.NewGuid(),
                Label = "Tab A",
                Content = "int a = 5;\n" +
                            "int b = 10;\n"+
                            "while (a < b) {\n" +
                                "   a = a + 1;\n" +
                                "   if (a == 7) {\n" +
                                "       b = b - 2;\n" +
                                "   }\n" +
                            "}\n"
            });
        userIndex = 0;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_stateHasChanged)
        {
            _stateHasChanged = false;
            StateHasChanged();
        }
    }

    public void AddTab(Guid id)
    {
        UserTabs.Add(new TabView { Id = id, Label = "New document", Content = "", IsSaved = false});
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
    }

    public void AddTab(Guid id, string label, string content, bool isSaved)
    {
        UserTabs.Add(new TabView { Id = id, Label = label, Content = content, IsSaved = isSaved });
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
    }

    public void RemoveTab(Guid id)
    {
        var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            UserTabs.Remove(tabView);
            _stateHasChanged = true;
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);


    private string _valueToSet = "";

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "cpp",
                GlyphMargin = true,
                Value = UserTabs[UserIndex].Content
            };
    }

    private async Task SetValue(int index)
    {
        await _editor.SetValue(UserTabs[index].Content);
    }

    private async void EditorOnKeyUp(KeyboardEvent keyboardEvent)
    {
        Console.WriteLine("OnKeyUpOriginal : " + keyboardEvent.Code);
        UserTabs[UserIndex].Content = await _editor.GetValue();
        UserTabs[UserIndex].IsSaved = false;
    }

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    public async void SaveFileAsync()
    {
        //var path = await folderPicker.PickFolder();


        using var stream = new MemoryStream(Encoding.Default.GetBytes(UserTabs[UserIndex].Content));

        var path = await fileSaver.SaveAsync(UserTabs[UserIndex].Label+".txt", stream, cancellationTokenSource.Token);

        if(path != null && !string.IsNullOrEmpty(path.FilePath))
        {
            string fileName = Path.GetFileName(path.FilePath);
            UserTabs[UserIndex].Label = fileName;
            UserTabs[UserIndex].IsSaved = true;
            StateHasChanged();
        }
    }




    public async void LoadFileAsync()
    {
        var customFileType = new FilePickerFileType(
                   new Dictionary<DevicePlatform, IEnumerable<string>>
                                       {
                       { DevicePlatform.iOS, new[] { "public.text" } }, // UTType values
                       { DevicePlatform.Android, new[] { "text/plain" } }, // MIME type
                       { DevicePlatform.WinUI, new[] { ".txt" } }, // file extension
                       { DevicePlatform.macOS, new[] { "txt" } },
                                       });
        PickOptions options = new()
            {
                PickerTitle = "Выберите файл скрипта",
                FileTypes = customFileType,
            };

        var result = await FilePicker.PickAsync(options);
        if (result != null)
        {
            var content = fileOperator.LoadScriptFile(result.FullPath);
            AddTab(Guid.NewGuid(), result.FileName, content, true);
            StateHasChanged();
        }

    }

    private string editStyle = "display: none";
    private bool showEditField = false;
    private string TextValue = "";

    private void EditLabel()
    {
        showEditField = !showEditField;
        if(showEditField == true)
        {
            editStyle = "";
        }
        else
        {
            editStyle = "display: none;";
        }
    }

    private void ChangeLabel()
    {
        UserTabs[UserIndex].Label = TextValue;
        TextValue = "";
        EditLabel();
    }

    private async void ShowAboutInfo()
    {
        await App.Current.MainPage.DisplayAlert("Информация", "Программа разработана при поддержке Виктора Русенко", "Понял принял");
    }

    private async Task TranslateCode()
    {

        string code = UserTabs[UserIndex].Content;

        string irCode = converter.ConvertToIR(code);
        string asmCode = converter.ConvertIRToAsm(irCode);
        var result = await SaveCompiledCode(asmCode);
        if(result)
            AddTab(Guid.NewGuid(), UserTabs[UserIndex].Label + ".asm", asmCode, true);
    }

    public async Task<bool> SaveCompiledCode(string asmCode)
    {
        bool isSuccess = false;
        using var stream = new MemoryStream(Encoding.Default.GetBytes(asmCode));

        var path = await fileSaver.SaveAsync(UserTabs[UserIndex].Label + ".asm", stream, cancellationTokenSource.Token);

        if (path != null && !string.IsNullOrEmpty(path.FilePath))
        {
            await App.Current.MainPage.DisplayAlert("Информация", "Ассемблерный код сохранен", "Ок");
            isSuccess = true;
            StateHasChanged();
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Ошибка", "Ошибка сохранения", "Ок");
            isSuccess = false;
        }
        return isSuccess;
    }
}